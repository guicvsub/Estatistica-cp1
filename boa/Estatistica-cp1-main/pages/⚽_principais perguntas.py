import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
from plotnine import *

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Jogadores", layout="wide")

# Logo
st.image("mascote.png", width=150)

# Menu lateral
menu = st.sidebar.selectbox("Escolha a P√°gina:", [
    "P√°gina Principal",
    "Pergunta 1 - Desempenho Casa vs Fora",
    "Pergunta 2 - xG vs Gols",
    "Pergunta 3 - Gols e Assist√™ncias por Minuto",
    "Pergunta 4 - Nota de Desempenho vs G/A",
    "Pergunta 5 - xG Alto vs Gols Baixos",
    "Pergunta 6 - Passes Certos vs Nota",
    "Pergunta 7 - Alta Efici√™ncia com Pouco Tempo"
])

st.sidebar.markdown("Desenvolvido por **Guilherme Santiago**")

# P√°gina Principal
if menu == "P√°gina Principal":
    st.title("Dashboard - An√°lise de Jogadores")
    st.markdown("## Hip√≥tese Central")
    st.markdown("""
    ‚öΩ **Hip√≥tese:** Jogadores com maior volume de expected goals (xG) nem sempre s√£o os que mais marcam gols, indicando diferen√ßas na efici√™ncia de finaliza√ß√£o entre os atletas.
    
    Esta hip√≥tese guia a an√°lise explorat√≥ria, ajudando a identificar jogadores subaproveitados, ineficientes ou altamente eficazes em convers√µes de finaliza√ß√µes.
    """)

    st.markdown("Use o menu lateral para explorar perguntas anal√≠ticas espec√≠ficas baseadas em desempenho de jogadores.")

# Pergunta 1 - Desempenho Casa vs Fora
elif menu == "Pergunta 1 - Desempenho Casa vs Fora":
    st.title("Desempenho: Casa vs Fora")
    st.markdown("**Pergunta:** H√° diferen√ßa significativa no desempenho dos jogadores entre jogos em casa e fora?")
    
    # Verificar se os dados est√£o presentes no session state
    if "data" not in st.session_state:
        st.error("Dados n√£o carregados no session state!")
        st.stop()

    # Carregamento da base de dados
    df = st.session_state["data"]

    # Verificar se as colunas esperadas est√£o presentes no DataFrame
    if "statistics_rating" not in df.columns or "home_or_away" not in df.columns or "statistics_minutes_played" not in df.columns:
        st.error("As colunas 'statistics_rating', 'home_or_away' ou 'statistics_minutes_played' n√£o est√£o presentes no DataFrame.")
        st.stop()

    # T√≠tulo da p√°gina
    st.title("üìò An√°lise do Desempenho dos Jogadores - Casa vs Fora")

    st.markdown("""
    Neste estudo, vamos comparar o desempenho dos jogadores em casa e fora de casa, levando em conta o **tempo jogado**. A an√°lise ser√° feita com base em m√©dias ponderadas e teste t para verificar se h√° diferen√ßa significativa entre o desempenho em casa e fora.
    """)
    
    # Fun√ß√£o para calcular a m√©dia ponderada
    def media_ponderada(desempenho, tempo_jogado):
        return np.sum(desempenho * tempo_jogado) / np.sum(tempo_jogado)

    # Fun√ß√£o para intervalo de confian√ßa
    def intervalo_confianca(amostra, confianca=0.95):
        media = np.mean(amostra)
        desvio = np.std(amostra, ddof=1)
        n = len(amostra)
        z = stats.norm.ppf((1 + confianca) / 2)
        erro = z * desvio / np.sqrt(n)
        return media, media - erro, media + erro

    # Fun√ß√£o para teste t de Student
    def teste_t(amostra_1, amostra_2):
        t_stat, p_value = stats.ttest_ind(amostra_1, amostra_2, equal_var=False)
        return t_stat, p_value

    # Filtrar dados de "em casa" e "fora de casa"
    rating_home = df[df['home_or_away'] == 'home']["statistics_rating"].dropna()
    rating_away = df[df['home_or_away'] == 'away']["statistics_rating"].dropna()

    time_played_home = df[df['home_or_away'] == 'home']["statistics_minutes_played"].dropna()
    time_played_away = df[df['home_or_away'] == 'away']["statistics_minutes_played"].dropna()

    # Calcular a m√©dia ponderada para desempenho (considerando o tempo jogado)
    media_ponderada_home = media_ponderada(rating_home, time_played_home)
    media_ponderada_away = media_ponderada(rating_away, time_played_away)

    # Aplicando a fun√ß√£o do IC para as duas amostras
    media_home, ic_inf_home, ic_sup_home = intervalo_confianca(rating_home)
    media_away, ic_inf_away, ic_sup_away = intervalo_confianca(rating_away)

    # Teste t para diferen√ßa de m√©dias
    t_stat, p_value = teste_t(rating_home, rating_away)

    # Exibi√ß√£o dos resultados
    st.markdown(f"""
    ### üìä M√©dia Ponderada para o Rating de Desempenho

    - M√©dia ponderada **em casa**: {media_ponderada_home:.2f}
    - M√©dia ponderada **fora**: {media_ponderada_away:.2f}

    ### üìä Intervalo de Confian√ßa para o Rating de Desempenho

    - M√©dia **em casa**: {media_home:.2f}
    - Intervalo de confian√ßa (95%): [{ic_inf_home:.2f}, {ic_sup_home:.2f}]
    - M√©dia **fora**: {media_away:.2f}
    - Intervalo de confian√ßa (95%): [{ic_inf_away:.2f}, {ic_sup_away:.2f}]


    

    ### üîç Teste t para Diferen√ßa de M√©dias

    - Estat√≠stica t: {t_stat:.2f}
    - Valor p: {p_value:.4f}

    ---
    **Interpreta√ß√£o:**
    - Se o valor p for menor que 0.05, podemos rejeitar a hip√≥tese nula e concluir que **h√° uma diferen√ßa significativa** no desempenho dos jogadores entre jogos em casa e fora de casa.
    """)
    fig, ax = plt.subplots()
    labels = ['Casa', 'Fora']
    valores = [media_ponderada_home, media_ponderada_away]
    cores = ['#1f77b4', '#ff7f0e']

    ax.bar(labels, valores, color=cores)
    ax.set_ylabel('M√©dia Ponderada do Rating')
    ax.set_title('Desempenho dos Jogadores: Casa vs Fora')
    plt.ylim(5,7)

    st.pyplot(fig)

    fig2, ax2 = plt.subplots()
    ax2.boxplot([rating_home, rating_away], labels=['Casa', 'Fora'], patch_artist=True,
            boxprops=dict(facecolor='#1f77b4'),
            medianprops=dict(color='black'))

    ax2.set_title('Distribui√ß√£o do Rating: Casa vs Fora')
    ax2.set_ylabel('Rating')

    st.pyplot(fig2)
    # Conclus√£o baseada no valor-p
    if p_value < 0.05:
        st.markdown("üìå **Conclus√£o:** Existe uma diferen√ßa estatisticamente significativa no desempenho dos jogadores entre os jogos em casa e fora de casa.")
    else:
        st.markdown("üìå **Conclus√£o:** N√£o existe uma diferen√ßa estatisticamente significativa no desempenho dos jogadores entre os jogos em casa e fora de casa.")



# As demais perguntas e p√°ginas seguem no mesmo formato.
elif menu == "Pergunta 2 - xG vs Gols":
    st.title("Rela√ß√£o: Expected Goals (xG) vs Gols")
    st.markdown("**Pergunta:** Existe rela√ß√£o entre os expected goals (xG) e os gols marcados pelos jogadores?")
    
    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o de colunas para num√©rico
    df['statistics_expected_goals'] = pd.to_numeric(df['statistics_expected_goals'], errors='coerce')
    df['statistics_goals'] = pd.to_numeric(df['statistics_goals'], errors='coerce')

    # Agrupamento por jogador
    df_grouped = df.groupby('player_name')[['statistics_expected_goals', 'statistics_goals']].sum().dropna()


    # Gr√°fico de dispers√£o
    fig, ax = plt.subplots()
    ax.scatter(df_grouped['statistics_expected_goals'], df_grouped['statistics_goals'], alpha=0.7)
    ax.set_title("Rela√ß√£o entre Expected Goals (xG) e Gols Marcados")
    ax.set_xlabel("Expected Goals (xG)")
    ax.set_ylabel("Gols Marcados")
    ax.grid(True)
    st.pyplot(fig)

    # An√°lise textual
    st.markdown("""
    ### Conclus√£o
    A an√°lise mostra uma rela√ß√£o positiva entre xG e gols marcados. Jogadores com mais xG tendem a marcar mais gols, embora haja exce√ß√µes. Isso indica que, apesar de haver uma tend√™ncia geral, outros fatores tamb√©m influenciam na concretiza√ß√£o dos gols.
    """)


elif menu == "Pergunta 3 - Gols e Assist√™ncias por Minuto":
    st.title("Efici√™ncia Ofensiva por Minuto")
    st.markdown("**Pergunta:** Quais jogadores mais contribu√≠ram com gols e assist√™ncias por minuto jogado?")

    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o para num√©rico
    df['statistics_goals'] = pd.to_numeric(df['statistics_goals'], errors='coerce')
    df['statistics_goal_assist'] = pd.to_numeric(df['statistics_goal_assist'], errors='coerce')
    df['statistics_minutes_played'] = pd.to_numeric(df['statistics_minutes_played'], errors='coerce')

    # Agrupamento por jogador e soma
    df_grouped = df.groupby('player_name')[['statistics_goals', 'statistics_goal_assist', 'statistics_minutes_played']].sum()

    # Remover jogadores sem minutos jogados
    df_grouped = df_grouped[df_grouped['statistics_minutes_played'] > 0]

    # Calcular contribui√ß√µes ofensivas por minuto
    df_grouped['contribuicao_por_minuto'] = (
        (df_grouped['statistics_goals'] + df_grouped['statistics_goal_assist']) / df_grouped['statistics_minutes_played']
    )

    # Selecionar os top 10 jogadores
    df_top = df_grouped.sort_values(by='contribuicao_por_minuto', ascending=False).head(10)


    # Gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    df_top['contribuicao_por_minuto'].plot(kind='barh', ax=ax, color='skyblue')
    ax.set_xlabel("Gols + Assist√™ncias por Minuto")
    ax.set_ylabel("Jogadores")
    ax.set_title("Top 10 Jogadores Mais Eficientes Ofensivamente (por Minuto)")
    plt.tight_layout()
    st.pyplot(fig)

    # Conclus√£o
    st.markdown("""
    ### Conclus√£o
    Essa an√°lise destaca os jogadores mais produtivos ofensivamente proporcional ao tempo que jogaram. Essa m√©trica √© √∫til para identificar atletas com alta efici√™ncia mesmo com menos minutos em campo.
    """)


elif menu == "Pergunta 4 - Nota de Desempenho vs G/A":
    st.title("Nota vs Participa√ß√µes Ofensivas")
    st.markdown("**Pergunta:** Os jogadores com maior nota de desempenho tamb√©m s√£o os que mais marcaram gols ou deram assist√™ncias?")
    
    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o de colunas relevantes para num√©rico
    df['statistics_rating'] = pd.to_numeric(df['statistics_rating'], errors='coerce')
    df['statistics_goals'] = pd.to_numeric(df['statistics_goals'], errors='coerce')
    df['statistics_goal_assist'] = pd.to_numeric(df['statistics_goal_assist'], errors='coerce')

    # Agrupamento por jogador
    df_grouped = df.groupby('player_name')[['statistics_rating', 'statistics_goals', 'statistics_goal_assist']].mean()
    df_grouped['participacoes_ofensivas'] = df.groupby('player_name')[['statistics_goals', 'statistics_goal_assist']].sum().sum(axis=1)

    # Remover jogadores com nota nula
    df_grouped = df_grouped.dropna(subset=['statistics_rating', 'participacoes_ofensivas'])


    # Gr√°fico de dispers√£o
    fig, ax = plt.subplots()
    ax.scatter(df_grouped['participacoes_ofensivas'], df_grouped['statistics_rating'], alpha=0.7)
    ax.set_xlabel("Participa√ß√µes Ofensivas (Gols + Assist√™ncias)")
    ax.set_ylabel("Nota M√©dia de Desempenho")
    ax.set_title("Nota de Desempenho vs Participa√ß√µes Ofensivas")
    ax.grid(True)
    st.pyplot(fig)

    # Conclus√£o
    st.markdown("""
    ### Conclus√£o
    A an√°lise sugere que existe uma leve correla√ß√£o entre participa√ß√µes ofensivas e a nota m√©dia do jogador. Por√©m, a nota de desempenho parece considerar outros aspectos al√©m de gols e assist√™ncias, como passes certos, posicionamento e contribui√ß√£o defensiva.
    """)


elif menu == "Pergunta 5 - xG Alto vs Gols Baixos":
    st.title("Jogadores com xG alto e poucos gols")
    st.markdown("**Pergunta:** H√° jogadores com alta taxa de expected goals (xG), mas com baixa concretiza√ß√£o em gols?")
    
    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o para num√©rico
    df['statistics_expected_goals'] = pd.to_numeric(df['statistics_expected_goals'], errors='coerce')
    df['statistics_goals'] = pd.to_numeric(df['statistics_goals'], errors='coerce')

    # Agrupamento por jogador
    df_grouped = df.groupby('player_name')[['statistics_expected_goals', 'statistics_goals']].sum()

    # C√°lculo da diferen√ßa entre xG e Gols
    df_grouped['diferenca'] = df_grouped['statistics_expected_goals'] - df_grouped['statistics_goals']

    # Filtrar jogadores com xG acima da m√©dia e gols abaixo da m√©dia
    media_xg = df_grouped['statistics_expected_goals'].mean()
    media_gols = df_grouped['statistics_goals'].mean()
    df_filtrado = df_grouped[(df_grouped['statistics_expected_goals'] > media_xg) & (df_grouped['statistics_goals'] < media_gols)]

    # Ordenar pelos que mais 'devem' gols
    df_filtrado = df_filtrado.sort_values(by='diferenca', ascending=False).head(10)


    # Exibi√ß√£o em tabela
    st.dataframe(df_filtrado[['statistics_expected_goals', 'statistics_goals', 'diferenca']])

    # Conclus√£o
    st.markdown("""
    ### Conclus√£o
    A tabela mostra os jogadores que mais produziram chances (xG alto), mas converteram menos gols do que o esperado. Esses casos podem indicar inefici√™ncia na finaliza√ß√£o ou falta de sorte nas jogadas.
    """)


elif menu == "Pergunta 6 - Passes Certos vs Nota":
    st.title("Precis√£o de Passe vs Nota de Desempenho")
    st.markdown("**Pergunta:** Existe rela√ß√£o entre o n√∫mero de passes certos e a nota de desempenho do jogador?")
    

    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o das colunas necess√°rias
    df['statistics_accurate_pass'] = pd.to_numeric(df['statistics_accurate_pass'], errors='coerce')
    df['statistics_rating'] = pd.to_numeric(df['statistics_rating'], errors='coerce')

    # Agrupamento por jogador
    df_grouped = df.groupby('player_name')[['statistics_accurate_pass', 'statistics_rating']].mean().dropna()


    # Gr√°fico de dispers√£o
    fig, ax = plt.subplots()
    ax.scatter(df_grouped['statistics_accurate_pass'], df_grouped['statistics_rating'], alpha=0.7)
    ax.set_xlabel("M√©dia de Passes Certos")
    ax.set_ylabel("Nota M√©dia de Desempenho")
    ax.set_title("Passes Certos vs Nota de Desempenho")
    ax.grid(True)
    st.pyplot(fig)

    # Conclus√£o
    st.markdown("""
    ### Conclus√£o
    Embora exista uma leve tend√™ncia positiva, a rela√ß√£o entre n√∫mero de passes certos e nota de desempenho n√£o √© totalmente linear. Isso mostra que a nota √© influenciada por m√∫ltiplos fatores al√©m dos passes, como a√ß√µes defensivas, posicionamento e contribui√ß√µes ofensivas.
    """)


elif menu == "Pergunta 7 - Alta Efici√™ncia com Pouco Tempo":
    st.title("Efici√™ncia em Pouco Tempo de Jogo")
    st.markdown("**Pergunta:** Quais jogadores entregaram mais resultados com menos tempo em campo ou com menos participa√ß√µes ofensivas?")

    # Carregamento dos dados
    df = pd.read_csv("dados-completos-Ituano.csv", sep=",", encoding="utf-8")

    # Convers√£o das colunas necess√°rias
    df['statistics_minutes_played'] = pd.to_numeric(df['statistics_minutes_played'], errors='coerce')
    df['statistics_goals'] = pd.to_numeric(df['statistics_goals'], errors='coerce')
    df['statistics_goal_assist'] = pd.to_numeric(df['statistics_goal_assist'], errors='coerce')

    # Agrupamento por jogador
    df_grouped = df.groupby('player_name')[['statistics_minutes_played', 'statistics_goals', 'statistics_goal_assist']].sum()
    df_grouped = df_grouped[df_grouped['statistics_minutes_played'] > 0]

    # Calcular efici√™ncia (gols + assist√™ncias por minuto)
    df_grouped['eficiencia'] = (df_grouped['statistics_goals'] + df_grouped['statistics_goal_assist']) / df_grouped['statistics_minutes_played']

    # Jogadores com menos tempo em campo e alta efici√™ncia
    df_filtrado = df_grouped.sort_values(by='statistics_minutes_played').head(20)
    df_top_eficientes = df_filtrado.sort_values(by='eficiencia', ascending=False).head(10)


    # Gr√°fico
    fig, ax = plt.subplots(figsize=(10, 6))
    df_top_eficientes['eficiencia'].plot(kind='barh', ax=ax, color='seagreen')
    ax.set_xlabel("Efici√™ncia (Gols + Assist√™ncias / Minuto)")
    ax.set_ylabel("Jogadores")
    ax.set_title("Top 10 Jogadores Mais Eficientes com Pouco Tempo em Campo")
    plt.tight_layout()
    st.pyplot(fig)

    # Conclus√£o
    st.markdown("""
    ### Conclus√£o
    Essa an√°lise identifica jogadores que, mesmo com tempo reduzido em campo, conseguiram gerar impacto significativo em termos ofensivos. Isso pode indicar bons finalizadores, atletas com entrada decisiva em jogos ou com bom aproveitamento de chances.
    """)

