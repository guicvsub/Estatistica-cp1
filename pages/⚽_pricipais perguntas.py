import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from plotnine import *

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Jogadores", layout="wide")

# Logo
st.image("mascote.png", width=150)

# Menu lateral
menu = st.sidebar.selectbox("Escolha a P√°gina:", [
    "P√°gina Principal",
    "Pergunta 1 - Desempenho Casa vs Fora",
    "Pergunta 2 - xG vs Gols",
    "Pergunta 3 - Gols e Assist√™ncias por Minuto",
    "Pergunta 4 - Nota de Desempenho vs G/A",
    "Pergunta 5 - xG Alto vs Gols Baixos",
    "Pergunta 6 - Passes Certos vs Nota",
    "Pergunta 7 - Alta Efici√™ncia com Pouco Tempo"
])

st.sidebar.markdown("Desenvolvido por **Guilherme Santiago**")

# P√°gina Principal
if menu == "P√°gina Principal":
    st.title("Dashboard - An√°lise de Jogadores")
    st.markdown("## Hip√≥tese Central")
    st.markdown("""
    ‚öΩ **Hip√≥tese:** Jogadores com maior volume de expected goals (xG) nem sempre s√£o os que mais marcam gols, indicando diferen√ßas na efici√™ncia de finaliza√ß√£o entre os atletas.
    
    Esta hip√≥tese guia a an√°lise explorat√≥ria, ajudando a identificar jogadores subaproveitados, ineficientes ou altamente eficazes em convers√µes de finaliza√ß√µes.
    """)

    st.markdown("Use o menu lateral para explorar perguntas anal√≠ticas espec√≠ficas baseadas em desempenho de jogadores.")

# Pergunta 1 - Desempenho Casa vs Fora
elif menu == "Pergunta 1 - Desempenho Casa vs Fora":
    st.title("Desempenho: Casa vs Fora")
    st.markdown("**Pergunta:** H√° diferen√ßa significativa no desempenho dos jogadores entre jogos em casa e fora?")
    
    # Verificar se os dados est√£o presentes no session state
    if "data" not in st.session_state:
        st.error("Dados n√£o carregados no session state!")
        st.stop()

    # Carregamento da base de dados
    df = st.session_state["data"]

    # Verificar se as colunas esperadas est√£o presentes no DataFrame
    if "statistics_rating" not in df.columns or "home_or_away" not in df.columns or "time_played" not in df.columns:
        st.error("As colunas 'statistics_rating', 'home_or_away' ou 'time_played' n√£o est√£o presentes no DataFrame.")
        st.stop()

    # T√≠tulo da p√°gina
    st.title("üìò An√°lise do Desempenho dos Jogadores - Casa vs Fora")

    st.markdown("""
    Neste estudo, vamos comparar o desempenho dos jogadores em casa e fora de casa, levando em conta o **tempo jogado**. A an√°lise ser√° feita com base em m√©dias ponderadas e teste t para verificar se h√° diferen√ßa significativa entre o desempenho em casa e fora.
    """)
    
    # Fun√ß√£o para calcular a m√©dia ponderada
    def media_ponderada(desempenho, tempo_jogado):
        return np.sum(desempenho * tempo_jogado) / np.sum(tempo_jogado)

    # Fun√ß√£o para intervalo de confian√ßa
    def intervalo_confianca(amostra, confianca=0.95):
        media = np.mean(amostra)
        desvio = np.std(amostra, ddof=1)
        n = len(amostra)
        z = stats.norm.ppf((1 + confianca) / 2)
        erro = z * desvio / np.sqrt(n)
        return media, media - erro, media + erro

    # Fun√ß√£o para teste t de Student
    def teste_t(amostra_1, amostra_2):
        t_stat, p_value = stats.ttest_ind(amostra_1, amostra_2, equal_var=False)
        return t_stat, p_value

    # Filtrar dados de "em casa" e "fora de casa"
    rating_home = df[df['home_or_away'] == 'home']["statistics_rating"].dropna()
    rating_away = df[df['home_or_away'] == 'away']["statistics_rating"].dropna()

    time_played_home = df[df['home_or_away'] == 'home']["time_played"].dropna()
    time_played_away = df[df['home_or_away'] == 'away']["time_played"].dropna()

    # Calcular a m√©dia ponderada para desempenho (considerando o tempo jogado)
    media_ponderada_home = media_ponderada(rating_home, time_played_home)
    media_ponderada_away = media_ponderada(rating_away, time_played_away)

    # Aplicando a fun√ß√£o do IC para as duas amostras
    media_home, ic_inf_home, ic_sup_home = intervalo_confianca(rating_home)
    media_away, ic_inf_away, ic_sup_away = intervalo_confianca(rating_away)

    # Teste t para diferen√ßa de m√©dias
    t_stat, p_value = teste_t(rating_home, rating_away)

    # Exibi√ß√£o dos resultados
    st.markdown(f"""
    ### üìä M√©dia Ponderada para o Rating de Desempenho

    - M√©dia ponderada **em casa**: {media_ponderada_home:.2f}
    - M√©dia ponderada **fora**: {media_ponderada_away:.2f}

    ### üìä Intervalo de Confian√ßa para o Rating de Desempenho

    - M√©dia **em casa**: {media_home:.2f}
    - Intervalo de confian√ßa (95%): [{ic_inf_home:.2f}, {ic_sup_home:.2f}]
    - M√©dia **fora**: {media_away:.2f}
    - Intervalo de confian√ßa (95%): [{ic_inf_away:.2f}, {ic_sup_away:.2f}]

    ### üîç Teste t para Diferen√ßa de M√©dias

    - Estat√≠stica t: {t_stat:.2f}
    - Valor p: {p_value:.4f}

    ---
    **Interpreta√ß√£o:**
    - Se o valor p for menor que 0.05, podemos rejeitar a hip√≥tese nula e concluir que **h√° uma diferen√ßa significativa** no desempenho dos jogadores entre jogos em casa e fora de casa.
    """)

    # Conclus√£o baseada no valor-p
    if p_value < 0.05:
        st.markdown("üìå **Conclus√£o:** Existe uma diferen√ßa estatisticamente significativa no desempenho dos jogadores entre os jogos em casa e fora de casa.")
    else:
        st.markdown("üìå **Conclus√£o:** N√£o existe uma diferen√ßa estatisticamente significativa no desempenho dos jogadores entre os jogos em casa e fora de casa.")

# As demais perguntas e p√°ginas seguem no mesmo formato.
elif menu == "Pergunta 2 - xG vs Gols":
    st.title("Rela√ß√£o: Expected Goals (xG) vs Gols")
    st.markdown("**Pergunta:** Existe rela√ß√£o entre os expected goals (xG) e os gols marcados pelos jogadores?")

elif menu == "Pergunta 3 - Gols e Assist√™ncias por Minuto":
    st.title("Efici√™ncia Ofensiva por Minuto")
    st.markdown("**Pergunta:** Quais jogadores mais contribu√≠ram com gols e assist√™ncias por minuto jogado?")

elif menu == "Pergunta 4 - Nota de Desempenho vs G/A":
    st.title("Nota vs Participa√ß√µes Ofensivas")
    st.markdown("**Pergunta:** Os jogadores com maior nota de desempenho tamb√©m s√£o os que mais marcaram gols ou deram assist√™ncias?")

elif menu == "Pergunta 5 - xG Alto vs Gols Baixos":
    st.title("Jogadores com xG alto e poucos gols")
    st.markdown("**Pergunta:** H√° jogadores com alta taxa de expected goals (xG), mas com baixa concretiza√ß√£o em gols?")

elif menu == "Pergunta 6 - Passes Certos vs Nota":
    st.title("Precis√£o de Passe vs Nota de Desempenho")
    st.markdown("**Pergunta:** Existe rela√ß√£o entre o n√∫mero de passes certos e a nota de desempenho do jogador?")

elif menu == "Pergunta 7 - Alta Efici√™ncia com Pouco Tempo":
    st.title("Efici√™ncia em Pouco Tempo de Jogo")
    st.markdown("**Pergunta:** Quais jogadores entregaram mais resultados com menos tempo em campo ou com menos participa√ß√µes ofensivas?")
